module core(cs,rd,wr,inta,a0,reset,isrset,code,datain,busdatain,Itim,sm,rd_isr,rd_imr,wr_imr,clr_imr,rd_irr,eor,setzero,sp,dataout,busdataout,freeze);
input cs;
input rd,wr;
input inta;
input a0;
input reset;
input [7:0]isrset;
input [2:0]code;
input [7:0]datain,busdatain;//Õâ¸öĞÅºÅ»¹¿ÉÄÜÊÇÀ´×ÔÓÚIRRµÄ7~0
//µ±INTAµÄµÚÒ»¸öÉÏÉıÑØÖ®ºó
output Itim;
output sm;
output rd_isr;
output rd_imr,wr_imr,clr_imr;
output rd_irr;
output [7:0]eor;
output [7:0]setzero;
output [2:0]sp;
output [7:0]dataout;
output [7:0]busdataout;
output freeze;
wire write1;
wire write2;
wire read1;
wire read2;
wire clk;
wire [7:0]icw1,icw2,icw3,icw4;
wire [7:0]ocw1,ocw2,ocw3;
wire [5:0]codeocw2;
wire [11:0]erocw2;
reg [3:0] state;//state
reg [7:0]er;
reg [1:0]edge1;
reg [1:0]flag1,flag2;
reg [2:0]pri;
assign freeze=1;
//edge1 not declared
//³õÊ¼»¯¹¤×÷£¬Ö÷ÒªÊÇÉèÖÃ×´Ì¬»ú£¬¸ù¾İ×´Ì¬»úµÄÌø×ªÀ´ÉèÖÃICWºÍOCW

	

	always@(posedge clk or posedge reset)//clkĞÅºÅÓÉwrite1/write2Ó°Ïì£¬write1 write2ÓÉcs,wr,rd,a0Ó°Ïì
		begin
			if(reset)//ÖØÖÃ×´Ì¬»ú
				state<=1;
			else //Èç¹û²»ÊÇreset£¬ÄÇ¾ÍÊÇclkÒıÆğµÄ
				begin
					case(state)//×´Ì¬×ª»»
						1://µ±Ç°×´Ì¬ÊÇ1
						if(write2)//Èç¹ûÊÇwrite2ÓĞĞ§£¬Ôòa0=1,ÕâÖÖÇé¿öÊÇÒªĞ´ÈëICW2£¬Ã»ÓĞelseÊÇÒòÎªÈç¹ûÊÇwrite2ÓĞĞ§£¬ÔòĞ´ÈëµÄÊÇICW1
						state<=2;//½øÈë×´Ì¬2£¬ÍâÃæµÄassignÓï¾ä»áĞ´ÈëICW2
						2:begin//Èç¹ûµ±Ç°×´Ì¬ÊÇ2
							if(~icw1[1])//Èç¹ûICW1[1]=0£¬Ôò±íÊ¾ÓĞ¼¶Áª£¬·ñÔòÊÇµ¥Æ¬Ê¹ÓÃ
								begin
							//×¢ÒâÕâÀïÊ¹ÓÃÁËÒ»¸öedge1±äÁ¿£¬ÊÇÒ»¸ö2Î»µÄĞÅºÅ£¬µ±ËüÎ»01Ê±²ÅÄÜ½øÈë×´Ì¬3£¬ÎÒÏëÕâÓ¦¸ÃÊÇÓÃÓÚ¼ÆÊıµÄ£¬¼´Ã¿´Î½øĞĞ¿ØÖÆ×ÖµÄĞ´Èë£¬¾Í¼ÆÊıÒ»´Î
							//ÒòÎªÒ»¹²Ö»ÓĞICW1,ICW2,ICW3,ICW4ĞèÒªĞ´Èë¼ÆÊı£¬ËùÒÔ2Î»¹»ÁË£¬Ó¦¸ÃÒ²ÊÇÒ»¸öalways
								if(edge1==2'b01)state<=3;//Èç¹ûÓĞ¼¶Áª£¬ÔòÓ¦¸ÃĞ´ÈëICW3			£¬ËùÒÔ½øÈë×´Ì¬3	
								end				
							else if(icw1[1]==0)//Èç¹ûÃ»ÓĞ¼¶Áª£¬ÔòÓ¦¸Ã²é¿´ÊÇ·ñĞ´ÈëICW4£¬ËùÒÔ½øÈë×´Ì¬4
									if(edge1==2'b01)state<=4;//set ICW4
							else if(edge1==2'b01)//Èç¹ûÃ»ÓĞ¼¶Áª£¬²¢ÇÒ²»ĞèÒªIC3,ICW4£¬ÔòÖ±½Ó½øÈë×´Ì¬5
									state<=5;
							end//end of case 2
						3:begin//ĞèÒªĞ´ÈëICW3
							if(icw1[0])//²é¿´ÊÇ·ñĞèÒªĞ´ÈëICW4£¬ÕâÀïºÜÆæ¹Ö£¬Ó¦¸ÃÒ²ÊÇÒª¼ì²éedge1µÄ£¬
							//µ«ÊÇÈ´Ã»ÓĞ¼ì²é£¬¶øÊÇ²»ĞèÒªÉèÖÃICW4µÄÊ±ºòÈ¥×´Ì¬5²Å¼ì²é
									state<=4;
								else if(edge1==2'b10)state<=5;//²»ĞèÒªÉèÖÃICW4£¬Ö±½Ó½øÈë×´Ì¬5£¬OCWµÄ¶ÁĞ´½×¶Î
							end//end of case 3
						4://set icw4£¬Èç¹ûĞèÒªĞ´ÈëICW4£¬Ôòµ±ICW4Ğ´ÈëÍê³ÉÖ®ºó½øÈë×´Ì¬5
							if(edge1==2'b11)state<=5;
						5://¾ÓÈ»»¹ÓĞÒ»¸öÂÖ»Ø£¡Õâ¸ö¿´²»Ã÷°×£¬µ±A0=0Ê±£¬Èç¹ûÊäÈëµÄ¿ØÖÆÃüÁîdatain[4]==1¾Í»áÆğµ½resetµÄ¹¦ÄÜ£¡
							if(write1&&datain[4])state<=1;
					endcase		
				end//end of else
		
		end//end of always
	always@(negedge write2 or posedge reset )
		begin
			if(reset)
				edge1=2'b00;
			else
				edge1=edge1+1;
		end
assign write1=(~cs&&~wr&&rd&&~a0)?1:0;//Ğ´ICW1
assign write2=(~cs&&~wr&&rd&&a0)?1:0;//Ğ´ICW2
assign clk=write1|write2;//Á½Õß½áºÏ²úÉúÊ±ÖÓ
//set ICW OCW£¬¸ù¾İ×´Ì¬Ğ´ÈëICWºÍOCW
assign icw1=reset?8'h00:(state==1&&write1?datain:icw1);
assign icw2=reset?8'h00:(state==2&&write2?datain:icw2);
assign icw3=reset?8'h00:(state==3&&write2?datain:icw3);
assign icw4=reset?8'h00:(state==4&&write2?datain:icw4);
assign ocw1=reset?8'h00:(state==5&&write2?datain:ocw1);//Õâ¸öµØ·½ÖµµÃ×¢Òâ£¬Ğ´OCW1ĞèÒªAOÎª1£¡ÕâÊÇÒòÎªOCW1[4]¿ÉÄÜÎª1£¬ÎªÁË±ÜÃâ±»ÖØÖÃ£¬Ö»ºÃÓÃA0=1
assign ocw2=reset?8'h00:(state==5&&write1&&(datain[4:3]==2'b00)?datain:ocw2);//OCW2,OCW3µÄdatain[4]ÓÀÔ¶Îª0£¬·ñÔò±»ÖØÖÃ
assign ocw3=reset?8'h00:(state==5&&write1&&(datain[4:3]==2'b01)?datain:ocw3);

assign Itim=icw1[3];//±ßÔµ´¥·¢»¹ÊÇµçÆ½´¥·¢
//read imr irr or isr 
//flag1 flag2 both not decaler 
//Êä³öÊı¾İ£¬µ±CPU·¢³ö¶ÁÈ¡IMR,ISR,IRRµÄÖ¸ÁîÊ±£¬ÕâĞ©Òª¶ÁÈ¡µÄÊı¾İ´ÓÕâÀï±»ËÍ³ö
//ICW2[7:3]5Î»±íÊ¾ÖÕ¶ËÀàĞÍºÅ£¬¶øcode[2:0]´ú±íµÄÊÇ·¢ÉúÖĞ¶ÏµÄÇëÇóµÄ×éºÏ
assign dataout=(read2||(read1&&ocw3[1]==1))?busdatain:((flag2==0&&flag1==1)?{icw2[7:3],code[2:0]}:8'h00);
//CPUµÄ¶ÁĞÅºÅ
//flag1==1±íÊ¾µÚÒ»¸öÉÏÉıÑØ£¬setzeroºÍEOIÓ¦¸ÃÊÇÒ»ÑùµÄÖµ
assign read1=(~cs&&wr&&~rd&&~a0)?1:0;
assign read2=(~cs&&wr&&~rd&&a0)?1:0;
assign rd_imr=read2;
//Êä³öÖĞ¶ÏÆÁ±Î²Ù×÷ÃüÁî×Ö¼´OCW1£¬ÆäÊä³öµÄÄ¿µÄµØ²»ÊÇCPU£¬Ó¦¸ÃÊÇÖĞ¶ÏÆÁ±Î¼Ä´æÆ÷IMRµÄÊäÈëdatain
assign busdataout=o1?ocw1:8'b0;//imr?
wire o1;//ÓÃÓÚ±íÃ÷µ±Ç°µÄ×´Ì¬CPUÒÑ¾­Ïò¿ØÖÆÄ£¿éĞ´ÈëÁËOCW1
assign o1=state==5&&write2;
//Ê²Ã´Ê±ºòÇå¿ÕIMRÄØ£¿¿´ÊéÉÏµÄÑù×Ó£¬Ó¦¸Ã ÊÇÔÚÉèÖÃÁËICW2Ö®ºó£¬¶øICW2ÊÇ¸ºÔğÖĞ¶ÏÀàĞÍºÅÉèÖÃµÄ£¬
//ÊéÉÏËµICW1ÃüÁîÇå³ıÖĞ¶ÏÆÁ±ÎIMR
assign clr_imr=o1;
assign wr_imr=o1;
//OCW2µÄ×÷ÓÃÊÇÖĞ¶ÏÅÅ¶Ó·½Ê½µÄÉèÖÃ£¬·ÖÎªÓÅÏÈÈ¨¹Ì¶¨ºÍÓÅÏÈÈ¨ÂÖ»»·½Ê½
assign codeocw2={code,ocw2[2:0]};//ÕâÊÇÒ»¸ö6Î»µÄĞÅºÅ£¬¸ßÈıÎ»ÊÇ·¢ÉúÖĞ¶ÏµÄ¼Ä´æÆ÷ºÅ×éºÏ£¬µÍÈıÎ»¾Í²»Ò»¶¨ÓĞÒâÒåÁË
//µ±SL¼´OCW2[6]=0Ê±£¬ÕâÈıÎ»¶¼ÊÇ0£¬¹Ì¶¨ÓÅÏÈ¼¶£¿·ñÔòÊÇÖ¸¶¨µÄÖĞ¶ÏµÈ¼¶0~7£¬¸ÃµÈ¼¶ÊÇÎªÁË¶ÔÖ¸¶¨µÄISR¸´Î»
//»òÖ´ĞĞÓÅÏÈ¼¶Ö¸¶¨ÂÖ»»·½Ê½
//mclr not declared
//erÃ»ÓĞÉùÃ÷
//codeÊÇÓÉPRÊä³ö¸ø¿ØÖÆµ¥ÔªµÄÕıÔÚ½øĞĞ·şÎñµÄÖĞ¶ÏÔ´
wire o2;
assign o2=state==5&&write1&&(datain[4:3]==2'b00);
	always@(inta,reset)//flag1 flag2£¬µ±µÚÒ»´ÎintaÉÏÉıÑØµÄÊ±ºò£¬flag1=1,flag2=0,Õâ¸öÊ±ºòÓ¦¸ÃµÈ´ıĞ´ÈëOCW3£¬µ±µÚ¶ş´ÎIntaÉÏÉıÑØµÄÊ±ºòÊÇ±íÊ¾ÖĞ¶ÏÒÑ¾­½áÊø£¬flag1=0,flag2=1
	begin
		if(reset)
			begin
			flag1=2'b00;
			flag2=2'b00;
			end
		else if(inta)
		begin
		if(flag1==2'b00)//first
		flag1=2'b01;
		else if(flag1==2'b01)//second
		flag1=2'b10;
		
		end
		else if(~inta)
			begin
				if(flag2==2'b00)
						flag2=2'b01;
				else //second
						begin
						flag2=2'b00;
						flag1=2'b00;
						end
						
			end

	end
	wire mclr;
	assign mclr=clr_imr;
	always@(codeocw2)//Èç¹ûÖĞ¶ÏÓÅÏÈ¼¶
	begin
		if(reset||mclr)begin er<=8'hff; end//er?mclr?
		else if(icw4[1])//Èç¹ûICW4[1]×Ô¶¯½áÊø·½Ê½£¬ISR×Ô¶¯¸´Î»£¬ÎŞĞè·¢ËÍEOI,¼´er,¿ÉÊÇÕâÀïÎªÊ²Ã´»¹ÒªÉèÖÃEOI£¿
		begin
			if(flag2)begin//intaµÄµÚ¶ş¸öºóÑÓ£¬ÕâÊ±Ó¦¸ÃÓÉ¿ØÖÆÆ÷Êä³öISRÉèÖÃ£¬²é¿´µ±Ç°ÕıÔÚ·şÎñµÄÖĞ¶ÏºÅcode£¬È»ºó½«¶ÔÓ¦µÄEOIÉèÖÃÎª1
			case (code)
				0:er<=8'b00000001;//reg 0 È
				1:er<=8'b00000010;//reg 1
				2:er<=8'b00000100;//reg 2
				3:er<=8'b00001000;//reg 3
				4:er<=8'b00010000;//reg 4
				5:er<=8'b00100000;//reg 5
				6:er<=8'b01000000;//reg 6
				7:er<=8'b10000000;//reg 7
				default:er<=8'h00;
			endcase//
			end//end of if flag
		end//o2Ó¦¸ÃºÍICW4[1]¶ÔÓ¦£¬µ±²»ÊÇ×Ô¶¯½áÊøÊ±£¬ÒªµÈCPUĞ´ÈëOCW2
			else if(o2)//±íÊ¾OCW2ÒÑ¾­ÉèÖÃÍê³É£¬ISR²»ÄÜÔÚINTAµÄµÚ¶ş¸öÏÂ½µÑØÇå³ı£¬ÕâÊ±ĞèÒªOCW2ÖĞµÄEOIÀ´¿ØÖÆÁË
				begin
				if(ocw2[5])begin //´ËÊ±ÕâÒ»Î»Ó¦¸ÃÎª1£¬·¢ËÍÖĞ¶Ï½áÊøÃüÁî¸øISR£¬µ«ÊÇ²»ÊÇsetzero,setzeroÓ¦¸ÃÔÚµÚÒ»¸öÏÂ½µÑØµÄÊ±ºò
					if(ocw2[6])begin //SL=1ËµÃ÷OCW2µÄ×îµÍÈıÎ»ÊÇÓĞĞ§µÄ
						case(ocw2[2:0])
							0:er<=8'b00000001;//reg 0 Èç¹ûµ±Ç°ÕıÔÚ·şÎñµÄÖĞ¶ÏÔ´ÊÇ
							1:er<=8'b00000010;//reg 1
							2:er<=8'b00000100;//reg 2
							3:er<=8'b00001000;//reg 3
							4:er<=8'b00010000;//reg 4
							5:er<=8'b00100000;//reg 5
							6:er<=8'b01000000;//reg 6
							7:er<=8'b10000000;//reg 7
							default:er<=8'h00;
						endcase						
						end
					else begin//·ñÔò×îµÍÈıÎ»ÓÀÔ¶ÊÇ0
							case(code)
							0:er<=8'b00000001;//reg 0 Èç¹ûµ±Ç°ÕıÔÚ·şÎñµÄÖĞ¶ÏÔ´ÊÇ
							1:er<=8'b00000010;//reg 1
							2:er<=8'b00000100;//reg 2
							3:er<=8'b00001000;//reg 3
							4:er<=8'b00010000;//reg 4
							5:er<=8'b00100000;//reg 5
							6:er<=8'b01000000;//reg 6
							7:er<=8'b10000000;//reg 7
							default:er<=8'h00;
							endcase
						end //edn of else	
					end//if(ocw2[5])
				end //end of if(o2)
		

	end//end of always
assign erocw2={er,ocw2[2:0]};
//ÏÂÃæµÄ´úÂë¸ºÔğÓÅÏÈ¼¶ÉèÖÃ£¬Ö®Ç°ÉèÖÃÁËER£¬Ò²¾ÍÊä³ö¸øprµÄEOI£¬prÓÖ¸øÁËISRcode
//µ«ÊÇÓÅÏÈ¼¶ÉèÖÃºÍOCW2[7]ÓĞ¹Ø£¬ÉèÖÃµÄÓÅÏÈ¼¶¿ÉÄÜÀ´×ÔÓÚOCW2[2:0]£¬Ò²¿ÉÄÜÀ´×ÔÓÚÆäËûµÄ
	always@(erocw2)
		begin		
			if(reset||mclr)//IMRµÄÇå¿ÕĞÅºÅ
			pri<=7;			//Õâ¸öÖµ±íÊ¾IR0ÓÅÏÈ¼¶×î¸ß
			else if(icw4[1])begin
				if(ocw2[7])begin//Õâ¸ö±íÊ¾ÊÇ×Ô¶¯ÂÖ»»×´Ì¬£¬ÔòerÒªÖĞ¶ÏµÄÄÇ¸öµÄÏÂÒ»¸öÊÇÖØµã£¬pri¾ÍÊÇPRµÄsp
							//aotu to circle
							case(er)
							8'h01:pri<=0;
							8'h02:pri<=1;
							8'h04:pri<=2;
							8'h08:pri<=3;
							8'h10:pri<=4;
							8'h20:pri<=5;
							8'h40:pri<=6;
							8'h80:pri<=7;
							endcase	
					end
				else if(o2&&ocw2[7])begin//·Ç×Ô¶¯EOIÑ­»··½Ê½£¬·Ç×Ô¶¯Ñ­»··½Ê½µÄ»°²»Ó¦¸ÃÊÇOCW[7]==0Âğ£¿
						if(ocw2[6])//SL=1,d0~d2£¬Ö¸¶¨×¨ÃÅµÄÓÅÏÈ¼¶
							begin
							case(ocw2[2:0])//L2~L1
							0:pri<=0;
							1:pri<=1;
							2:pri<=2;
							3:pri<=3;
							4:pri<=4;
							5:pri<=5;
							6:pri<=6;
							7:pri<=7;
							endcase
							end	
						else //SL=0	£¬ÎŞ×¨ÃÅÖ¸¶¨µÄÓÅÏÈ¼¶µÈ¼¶
							begin
							case(er)
							8'h01:pri<=0;
							8'h02:pri<=1;
							8'h03:pri<=2;
							8'h04:pri<=3;
							8'h05:pri<=4;
							8'h06:pri<=5;
							8'h07:pri<=6;
							8'h08:pri<=7;
							endcase					
							end //else if SL=0
				end //else if(o2&&ocw2[7])begin//BEGIN no EOI 
				else begin//no EOI ocw2 d7=0
				pri<=pri;
			end
				
		end//end of if (o2)
	end//end of always
		
assign sm=(ocw3[6:5]==2'b10)?1:0;
assign sp=pri;
assign eor=er;
assign setzero=eor;
//read irr
assign rd_irr=(read1&&ocw3[1:0]==2'b10)?1:0;
assign rd_isr=(read1&&ocw3[1:0]==2'b11)?1:0;
endmodule
